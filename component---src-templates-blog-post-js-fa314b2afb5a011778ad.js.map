{"version":3,"sources":["webpack:///./i18n.js","webpack:///./src/components/Panel.js","webpack:///./src/utils/i18n.js","webpack:///./src/templates/blog-post.js"],"names":["exports","supportedLanguages","en","kr","jp","Panel","children","style","fontSize","border","borderRadius","padding","background","wordBreak","codeToLanguage","code","replace","Translations","render","translations","this","props","className","fontFamily","length","map","translation","i","Fragment","key","lang","to","path","React","Component","BlogPostTemplate","post","data","markdownRemark","siteTitle","get","fields","langKey","pageContext","translatedLinks","html","forEach","link","translatedLink","RegExp","pathWithoutLang","slug","filter","sort","a","b","Layout","location","title","SEO","frontmatter","description","spoiler","color","scale","display","marginBottom","rhythm","marginTop","formatPostDate","date","formatReadingTime","timeToRead","dangerouslySetInnerHTML","__html","boxShadow","textDecoration","Bio"],"mappings":"4EAAAA,EAAQC,mBAAqB,CAC3BC,GAAI,UACJC,GAAI,MACJC,GAAI,Q,wLCiBSC,MAlBf,YAAwC,IAAxBC,EAAuB,EAAvBA,SAAuB,IAAbC,aAAa,MAAL,GAAK,EACrC,OACE,uBACEA,MAAK,eACHC,SAAU,QACVC,OAAQ,sBACRC,aAAc,SACdC,QAAS,SACTC,WAAY,uBACZC,UAAW,YACRN,IAGJD,I,oCCbMQ,EAAiB,SAAAC,GAC5B,OAAOd,qBAAmBc,GAAMC,QAAQ,KAAM,MCa1CC,E,kGACJC,OAAA,WAAU,IACHC,EAAgBC,KAAKC,MAArBF,aAEL,OACE,yBAAKG,UAAU,gBACb,kBAAC,EAAD,CAAOf,MAAO,CAACgB,WAVP,2KAWLJ,EAAaK,OAAS,GACrB,8BACE,0DACCL,EAAaM,KAAI,SAACC,EAAaC,GAAd,OAChB,kBAAC,IAAMC,SAAP,CAAgBC,IAAKH,EAAYI,MAC/B,kBAAC,OAAD,CAAMC,GAAIL,EAAYM,MAAON,EAAYI,MACxCH,IAAMR,EAAaK,OAAS,EAAI,GAAK,c,GAb7BS,IAAMC,WAwB3BC,E,kGACJjB,OAAA,WACE,IAAMkB,EAAOhB,KAAKC,MAAMgB,KAAKC,eACvBC,EAAYC,IAAIpB,KAAKC,MAAO,gCAC5BS,EAAOM,EAAKK,OAAOC,QAHlB,EAI+BtB,KAAKC,MAAMsB,YAA5CxB,EAJE,EAIFA,aAAcyB,EAJZ,EAIYA,gBAGfC,EAAOT,EAAKS,KAEhBD,EAAgBE,SAAQ,SAAAC,GAItB,IAAIC,EAAiB,IAAMlB,EAAOiB,EAClCF,EAAOA,EAAK7B,QACV,IAAIiC,OAAO,KAAmBF,EAJnB/B,QAAQ,sBAAuB,QAIJ,KAAK,KAC3C,IAAMgC,EAAiB,QAI3B,IAAME,EAAkBd,EAAKK,OAAOU,KAAKnC,QAAjB,IAA6Bc,EAA7B,IAAsC,IAW9D,OAVAX,EAAeA,EACZiC,QAAO,SAAA1B,GAAW,OAAIA,GAAeI,KACrCuB,MAAK,SAACC,EAAGC,GACR,OAAOzC,EAAewC,GAAKxC,EAAeyC,IAAM,EAAI,KAErD9B,KAAI,SAAAC,GAAW,MAAK,CACnBM,KAAK,IAAKN,EAAN,IAAqBwB,EACzBpB,KAAMhB,EAAeY,OAIvB,kBAAC8B,EAAA,EAAD,CAAQC,SAAUrC,KAAKC,MAAMoC,SAAUC,MAAOnB,GAC5C,kBAACoB,EAAA,EAAD,CACE7B,KAAMA,EACN4B,MAAOtB,EAAKwB,YAAYF,MACxBG,YAAazB,EAAKwB,YAAYE,QAC9BX,KAAMf,EAAKK,OAAOU,OAEpB,8BACE,iCACE,gCACE,wBAAI5C,MAAO,CAACwD,MAAO,qBAChB3B,EAAKwB,YAAYF,OAEpB,uBACEnD,MAAK,iBACAyD,aAAM,IADN,CAEHC,QAAS,QACTC,aAAcC,YAAO,GACrBC,UAAWD,aAAO,OAGnBE,YAAejC,EAAKwB,YAAYU,KAAMxC,GARzC,MASSyC,YAAkBnC,EAAKoC,aAE/BrD,EAAaK,OAAS,GACrB,kBAAC,EAAD,CAAcL,aAAcA,KAGhC,yBAAKsD,wBAAyB,CAACC,OAAQ7B,OAG3C,+BACE,wBACEtC,MAAO,CACLgB,WAAY,yBACZ6C,UAAWD,YAAO,OAGpB,kBAAC,OAAD,CACE5D,MAAO,CACLoE,UAAW,OACXC,eAAgB,OAChBb,MAAO,iBAEThC,GAAE,IAAMD,GANV,YAWF,kBAAC+C,EAAA,EAAD,S,GAlFqB5C,IAAMC,WAyFtBC","file":"component---src-templates-blog-post-js-fa314b2afb5a011778ad.js","sourcesContent":["exports.supportedLanguages = {\n  en: 'English',\n  kr: '한국어',\n  jp: '日本語',\n};\n","import React from 'react';\n\nfunction Panel({children, style = {}}) {\n  return (\n    <p\n      style={{\n        fontSize: '0.9em',\n        border: '1px solid var(--hr)',\n        borderRadius: '0.75em',\n        padding: '0.75em',\n        background: 'var(--inlineCode-bg)',\n        wordBreak: 'keep-all',\n        ...style,\n      }}\n    >\n      {children}\n    </p>\n  );\n}\n\nexport default Panel;\n","import {supportedLanguages} from './../../i18n';\n\nexport const codeToLanguage = code => {\n  return supportedLanguages[code].replace(/ /g, ' ' /* nbsp */);\n};\n","import React from 'react';\nimport {Link, graphql} from 'gatsby';\nimport get from 'lodash/get';\nimport '../fonts/fonts-post.css';\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Panel from '../components/Panel';\nimport {formatPostDate, formatReadingTime} from '../utils/helpers';\nimport {rhythm, scale} from '../utils/typography';\nimport {codeToLanguage, replaceAnchorLinksByLanguage} from '../utils/i18n';\n\nconst systemFont = `system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\",\n    \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\n    \"Droid Sans\", \"Helvetica Neue\", sans-serif`;\n\nclass Translations extends React.Component {\n  render() {\n    let {translations} = this.props;\n\n    return (\n      <div className='translations'>\n        <Panel style={{fontFamily: systemFont}}>\n          {translations.length > 0 && (\n            <span>\n              <span>Supported translations: </span>\n              {translations.map((translation, i) => (\n                <React.Fragment key={translation.lang}>\n                  <Link to={translation.path}>{translation.lang}</Link>\n                  {i === translations.length - 1 ? '' : ' • '}\n                </React.Fragment>\n              ))}\n            </span>\n          )}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark;\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title');\n    const lang = post.fields.langKey;\n    let {translations, translatedLinks} = this.props.pageContext;\n\n    // Replace original links with translated when available.\n    let html = post.html;\n\n    translatedLinks.forEach(link => {\n      function escapeRegExp(str) {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n      }\n      let translatedLink = '/' + lang + link;\n      html = html.replace(\n        new RegExp('\"' + escapeRegExp(link) + '\"', 'g'),\n        '\"' + translatedLink + '\"'\n      );\n    });\n\n    const pathWithoutLang = post.fields.slug.replace(`/${lang}/`, '');\n    translations = translations\n      .filter(translation => translation != lang)\n      .sort((a, b) => {\n        return codeToLanguage(a) < codeToLanguage(b) ? -1 : 1;\n      })\n      .map(translation => ({\n        path: `/${translation}/${pathWithoutLang}`,\n        lang: codeToLanguage(translation),\n      }));\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          lang={lang}\n          title={post.frontmatter.title}\n          description={post.frontmatter.spoiler}\n          slug={post.fields.slug}\n        />\n        <main>\n          <article>\n            <header>\n              <h1 style={{color: 'var(--textTitle)'}}>\n                {post.frontmatter.title}\n              </h1>\n              <p\n                style={{\n                  ...scale(-1 / 5),\n                  display: 'block',\n                  marginBottom: rhythm(1),\n                  marginTop: rhythm(-4 / 5),\n                }}\n              >\n                {formatPostDate(post.frontmatter.date, lang)}\n                {` • ${formatReadingTime(post.timeToRead)}`}\n              </p>\n              {translations.length > 0 && (\n                <Translations translations={translations} />\n              )}\n            </header>\n            <div dangerouslySetInnerHTML={{__html: html}} />\n          </article>\n        </main>\n        <aside>\n          <h3\n            style={{\n              fontFamily: 'Montserrat, sans-serif',\n              marginTop: rhythm(0.25),\n            }}\n          >\n            <Link\n              style={{\n                boxShadow: 'none',\n                textDecoration: 'none',\n                color: 'var(--yellow)',\n              }}\n              to={`/${lang}`}\n            >\n              hellomh\n            </Link>\n          </h3>\n          <Bio />\n        </aside>\n      </Layout>\n    );\n  }\n}\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: {slug: {eq: $slug}}) {\n      id\n      html\n      timeToRead\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        spoiler\n      }\n      fields {\n        slug\n        langKey\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}